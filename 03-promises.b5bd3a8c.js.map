{"mappings":"gfAQA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SAC9BC,EAAaF,SAASC,cAAc,uBACpCE,EAAYH,SAASC,cAAc,sBACnCG,EAAcJ,SAASC,cAAc,wBAE3C,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAE3B,IAAMC,EAAgBC,KAAKC,SAAW,GAESC,YAApC,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAGYG,EAAzB,CAAEJ,WAAUC,S,GAGpBA,E,IAIPR,EAAKgB,iBAAiB,UAAU,SAACC,GAC/BA,EAAEC,iBAOgC,IALM,IAAlCC,EAAQC,OAAOjB,EAAWkB,OAC1BC,EAAOF,OAAOhB,EAAUiB,OACxBE,EAASH,OAAOf,EAAYgB,OAE5BG,EAAW,GACRC,EAAI,EAAGA,EAAIF,EAAQE,IAAK,CAC/B,IAAMC,EAAeP,EAAQM,EAAIH,EAEDE,EAAvBG,KAAKrB,EAAcmB,EAAI,EAAGC,G,CAGrCF,EAASI,SAAQ,SAACC,GAChBA,EACGC,MAAK,SAAAC,G,IAAGxB,EAAQwB,EAARxB,SAAUC,EAAKuB,EAALvB,MACjBV,EAAAkC,OAAOC,QAAQ,uBAAwCC,OAAf3B,EAAS,QAAY2B,OAAN1B,EAAM,M,IAE9D2B,OAAM,SAAAJ,G,IAAGxB,EAAQwB,EAARxB,SAAUC,EAAKuB,EAALvB,MAClBV,EAAAkC,OAAOI,QAAQ,sBAAqCF,OAAf3B,EAAS,QAAY2B,OAAN1B,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('.form');\nconst delayInput = document.querySelector('input[name=\"delay\"]');\nconst stepInput = document.querySelector('input[name=\"step\"]');\nconst amountInput = document.querySelector('input[name=\"amount\"]');\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n\n    const shouldResolve = Math.random() > 0.3; // Случайное решение о выполнении или отклонении промиса\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay }); // Выполнение промиса с объектом данных\n\n      } else {\n        reject({ position, delay }); // Отклонение промиса с объектом данных\n\n      }\n    }, delay);\n  });\n}\n\nform.addEventListener('submit', (e) => {\n  e.preventDefault(); // Предотвращение стандартного поведения формы\n\n  const delay = Number(delayInput.value);\n  const step = Number(stepInput.value);\n  const amount = Number(amountInput.value);\n\n  const promises = []; // Массив для хранения созданных промисов\n  for (let i = 0; i < amount; i++) {\n    const currentDelay = delay + i * step; // Расчет текущей задержки с учетом шага\n\n    promises.push(createPromise(i + 1, currentDelay)); // Добавление промиса в массив\n  }\n\n  promises.forEach((promise) => {\n    promise\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  });\n});"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$delayInput","$ce04d3a99e08e73b$var$stepInput","$ce04d3a99e08e73b$var$amountInput","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","e","preventDefault","delay1","Number","value","step","amount","promises","i","currentDelay","push","forEach","promise","then","param","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.b5bd3a8c.js.map"}